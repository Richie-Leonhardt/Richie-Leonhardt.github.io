<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DS on Richie&#39;s Blog</title>
    <link>https://richie-leonhardt.github.io/tags/ds/</link>
    <description>Recent content in DS on Richie&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 07 Aug 2020 19:24:29 +0800</lastBuildDate>
    
	<atom:link href="https://richie-leonhardt.github.io/tags/ds/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>二叉树操作集</title>
      <link>https://richie-leonhardt.github.io/2020/08/07/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%93%8D%E4%BD%9C%E9%9B%86/</link>
      <pubDate>Fri, 07 Aug 2020 19:24:29 +0800</pubDate>
      
      <guid>https://richie-leonhardt.github.io/2020/08/07/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%93%8D%E4%BD%9C%E9%9B%86/</guid>
      <description>结点的数据结构 #define TElem int typedef struct BiTNode *BiTree; struct BiTNode{ TElem data; BiTree lchild; BiTree rchild; }; 创建二叉树 BiTree CreatBiTree(BiTree T){ char a[20]; scanf(&amp;#34;%s&amp;#34;,a); if(strcmp(a,&amp;#34;#&amp;#34;) == 0){ T = NULL; }else{ int input = 0; int i,j; for (i = 0; a[i] != &amp;#39;\0&amp;#39; &amp;amp;&amp;amp; i &amp;lt; 20; ++i);	//这边两个for循环是将字符串的数字转换成int类型的 	for (i = i-1,j = 1; i &amp;gt;= 0; --i,j *= 10){ input += ((int)a[i] - 48) * j; } T = (BiTree)malloc(sizeof(struct BiTNode));	//生成根结点 	T-&amp;gt;data = input; T-&amp;gt;lchild = CreatBiTree(T-&amp;gt;lchild); //构造左子树 	T-&amp;gt;rchild = CreatBiTree(T-&amp;gt;rchild); //构造右子树  } return T; } 前序遍历 //前序遍历 void PreorderTraversal( BiTree T ){ if ( T ){ printf(&amp;#34; %d&amp;#34;,T-&amp;gt;data); PreorderTraversal(T-&amp;gt;lchild); PreorderTraversal(T-&amp;gt;rchild); } } 中序遍历 //中序遍历 void InorderTraversal( BiTree T ){ if ( T ){ InorderTraversal(T-&amp;gt;lchild); printf(&amp;#34; %d&amp;#34;,T-&amp;gt;data); InorderTraversal(T-&amp;gt;rchild); } } 后序遍历 //后序遍历 void PostorderTraversal( BiTree T ){ if ( T ){ PostorderTraversal(T-&amp;gt;lchild); PostorderTraversal(T-&amp;gt;rchild); printf(&amp;#34; %d&amp;#34;,T-&amp;gt;data); } } 非递归中序遍历 //非递归中序遍历 void InorderTraversal_NotRecursive(BiTree T){ if ( T ){ BiTree stack_arr[100]; int top = -1; while( top !</description>
    </item>
    
  </channel>
</rss>